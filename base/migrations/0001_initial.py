# Generated by Django 4.2.2 on 2023-06-22 19:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import base.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("supervised_learning", "0013_alter_oneclasssvc_nu"),
    ]

    operations = [
        migrations.CreateModel(
            name="Symbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "symbol",
                    models.CharField(max_length=20, verbose_name="Symbol"),
                ),
                (
                    "status",
                    models.CharField(max_length=20, verbose_name="Status"),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, verbose_name="Is Enabled?"
                    ),
                ),
                (
                    "base_asset",
                    models.CharField(max_length=20, verbose_name="Base Asset"),
                ),
                (
                    "quote_asset",
                    models.CharField(
                        max_length=20, verbose_name="Quote Asset"
                    ),
                ),
                (
                    "volume_quote_asset",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=20,
                        null=True,
                        verbose_name="Quote Asset Volume (24h)",
                    ),
                ),
                (
                    "last_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Last Value",
                    ),
                ),
                (
                    "last_value_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Value (time)"
                    ),
                ),
                (
                    "last_variation",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Last Variation",
                    ),
                ),
                (
                    "last_variation_24h",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Last Variation - 24 hs",
                    ),
                ),
                (
                    "model_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Model Score",
                    ),
                ),
                (
                    "prediction_time_interval",
                    models.CharField(
                        blank=True,
                        max_length=2,
                        null=True,
                        verbose_name="Prediction (time interval)",
                    ),
                ),
                (
                    "prediction_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Prediction (time)"
                    ),
                ),
                (
                    "prediction_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Prediction (value)",
                    ),
                ),
                (
                    "prediction_variation",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=16,
                        null=True,
                        verbose_name="Prediction (variation)",
                    ),
                ),
                (
                    "others",
                    models.JSONField(default=dict, verbose_name="Others"),
                ),
            ],
            options={
                "verbose_name": "Symbol",
                "verbose_name_plural": "Symbols",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="WSClient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("channel_name", models.CharField(max_length=256)),
                (
                    "time_connect",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Time - Connection"
                    ),
                ),
                (
                    "time_disconnect",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Time - Disconnection",
                    ),
                ),
            ],
            options={
                "verbose_name": "WS Client",
                "verbose_name_plural": "WS Clients",
            },
        ),
        migrations.CreateModel(
            name="TrainingData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "time",
                    models.DateTimeField(
                        verbose_name="Time (End of Interval)"
                    ),
                ),
                (
                    "time_interval",
                    models.CharField(
                        max_length=2, verbose_name="Time Interval"
                    ),
                ),
                (
                    "price_close",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=16,
                        verbose_name="Price - End of Interval",
                    ),
                ),
                (
                    "variation",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=16,
                        verbose_name="Variation (t)",
                    ),
                ),
                (
                    "variation_01",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-1)",
                    ),
                ),
                (
                    "variation_02",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-2)",
                    ),
                ),
                (
                    "variation_03",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-3)",
                    ),
                ),
                (
                    "variation_04",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-4)",
                    ),
                ),
                (
                    "variation_05",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-5)",
                    ),
                ),
                (
                    "variation_06",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-6)",
                    ),
                ),
                (
                    "variation_07",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-7)",
                    ),
                ),
                (
                    "variation_08",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-8)",
                    ),
                ),
                (
                    "variation_09",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-9)",
                    ),
                ),
                (
                    "variation_10",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-10)",
                    ),
                ),
                (
                    "variation_11",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-11)",
                    ),
                ),
                (
                    "variation_12",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-12)",
                    ),
                ),
                (
                    "variation_13",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-13)",
                    ),
                ),
                (
                    "variation_14",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-14)",
                    ),
                ),
                (
                    "variation_15",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-15)",
                    ),
                ),
                (
                    "variation_16",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-16)",
                    ),
                ),
                (
                    "variation_17",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-17)",
                    ),
                ),
                (
                    "variation_18",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-18)",
                    ),
                ),
                (
                    "variation_19",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-19)",
                    ),
                ),
                (
                    "variation_20",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation (t-20)",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="training_data",
                        to="base.symbol",
                        verbose_name="Symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Training Data",
                "verbose_name_plural": "Training Data",
                "ordering": ["time"],
            },
        ),
        migrations.CreateModel(
            name="OutliersSVC",
            fields=[
                (
                    "oneclasssvc_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="supervised_learning.oneclasssvc",
                    ),
                ),
                (
                    "window",
                    models.IntegerField(
                        default=1,
                        help_text="Window to be used to consider outlier",
                        verbose_name="Window",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="base.symbol",
                        verbose_name="Symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Outliers SVC",
                "verbose_name_plural": "Outliers SVCs",
            },
            bases=(
                base.models.TraderoMixin,
                "supervised_learning.oneclasssvc",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Kline",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time_open", models.DateTimeField(verbose_name="Open Time")),
                (
                    "time_close",
                    models.DateTimeField(verbose_name="Close Time"),
                ),
                (
                    "time_interval",
                    models.CharField(
                        max_length=2, verbose_name="Time Interval"
                    ),
                ),
                (
                    "price_open",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Price Open",
                    ),
                ),
                (
                    "price_high",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Price High",
                    ),
                ),
                (
                    "price_low",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Price Low",
                    ),
                ),
                (
                    "price_close",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Price Close",
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        decimal_places=8, max_digits=20, verbose_name="Volume"
                    ),
                ),
                (
                    "volume_quote_asset",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Quote Asset Volume",
                    ),
                ),
                (
                    "volume_tb_base_asset",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Taker buy base asset volume",
                    ),
                ),
                (
                    "volume_tb_quote_asset",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Taker buy quote asset volume Price",
                    ),
                ),
                (
                    "number_of_trades",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Number of Trades",
                    ),
                ),
                (
                    "variation",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=20,
                        verbose_name="Variation",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="klines",
                        to="base.symbol",
                        verbose_name="Symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kline",
                "verbose_name_plural": "Klines",
            },
        ),
        migrations.CreateModel(
            name="DecisionTreeRegressor",
            fields=[
                (
                    "hgbtreeregressor_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="supervised_learning.hgbtreeregressor",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="base.symbol",
                        verbose_name="Symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Decision Trees Regressor",
                "verbose_name_plural": "Decision Trees Regressors",
            },
            bases=(
                base.models.TraderoMixin,
                "supervised_learning.hgbtreeregressor",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Binance's API key",
                    ),
                ),
                (
                    "api_secret",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Binance's API key",
                    ),
                ),
                (
                    "trading_active",
                    models.BooleanField(
                        default=True, verbose_name="Is Trading Active?"
                    ),
                ),
                (
                    "others",
                    models.JSONField(default=dict, verbose_name="Others"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="trainingdata",
            constraint=models.UniqueConstraint(
                fields=("symbol", "time", "time_interval"),
                name="unique_symbol_time",
            ),
        ),
    ]
